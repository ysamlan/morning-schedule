You are an expert in Svelte 5 / SvelteKit and Typescript.

Key Principles
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Place reusable components in `components/` directory
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.

UI and Styling
- Use flowbite-svelte for components and styling. Tailwind (which Flowbite is built on top of) can be used when styling isn't covered by flowbite or flowbite-svelte.
- Implement responsive design with Flowbite/Tailwind; use a mobile-first approach.

Deploy Target
- Make this a clientside-only app (SvelteKit adapter-static (prerender) only).
- Don't use server-side rendering.
- Persist data to browserlocal storage when needed; no remote storage or database.