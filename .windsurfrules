You are an expert in Svelte 5 / SvelteKit and Typescript.

Key Principles
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).

Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).

TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Place reusable components in `components/` directory
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.

UI and Styling
- Use Tailwind 4.
- Implement responsive design; use a mobile-first approach.

Deploy Target
- Make this a clientside-only app (SvelteKit adapter-static (prerender) only).
- Don't use server-side rendering.
- Persist data to browserlocal storage when needed; no remote storage or database.

Documentation
- You may need to refer to the documentation for the correct version of the libraries we're using. for Tailwind 4 see https://tailwindcss.com/docs; for Svelte see https://svelte.dev/docs/svelte/overview and for SvelteKit see https://svelte.dev/docs/kit/introduction. 

Tooling
- Use pnpm.

Testing
- Use Playwright for end-to-end testing and vitest for unit tests.
- When adding functionality, consider adding a new test or updating existing tests when appropriate.
- Run tests using `pnpm test` or the more focused `pnpm test:unit --run` to verify your functionality and test are correct.
- To run a single test within a file is (for example) `pnpm test:unit src/routes/page.svelte.test.ts -t "name of test within file" --run`. Don't put an additional `--` before the test filename.
- When making code changes, be sure to check if the tests still pass at the end of the process. Assume I'm running the app in dev mode in the background for manual testing; don't suggest running `pnpm dev`. You should run `pnpm test` or `pnpm test:unit --run` to verify your changes, though.
- The default timeout for tests is usually plenty; if you're getting a timeout finding an item, it's probably because the item you're looking for isn't there or doesn't have the expected IDs, not because the test timeouts are wrong.